# -*- coding: utf-8 -*-
"""Sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z5og63D5gmG77mcRSF5OoZvJobSGbmEn
"""

import pandas as pd
import numpy as np
from datetime import time

# Data visualization

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

Sales = pd.read_csv('/content/drive/MyDrive/Brightlight/Sales Case Study.csv')

Sales.head()

Sales['Date'] = pd.to_datetime(Sales['Date'])

Sales = Sales.round(2)

Sales.shape

Sales.describe()

Sales.duplicated().sum()

Sales.info()

Sales.isnull().sum()

Sales['Sales'].hist()

Sales['Cost Of Sales'].hist()

Sales['Quantity Sold'].hist()

Sales.corr(numeric_only=True)
sns.heatmap(Sales.corr(numeric_only=True), annot=True)

Sales['Date'].min(), Sales['Date'].max()
Sales['Date'].sort_values().diff().value_counts()

Sales.columns

Sales[Sales['Sales'] < 0]
Sales[Sales['Cost Of Sales'] < 0]
Sales[Sales['Quantity Sold'] < 0]
Sales[Sales['Date'] > pd.Timestamp.today()]

"""Daily Sales Price Per Unit =     (Sales/(Quantity_Sold))"""

Sales['Daily Sales Price Per Unit'] = (Sales['Sales']/Sales['Quantity Sold']).round(2)

plt.figure(figsize=(10,5))
sns.lineplot(data=Sales, x='Date', y='Daily Sales Price Per Unit')

"""	Average Unit Sales Price    =   ((Total Sales)/(Total Quantity_Sold))"""

display(Sales['Daily Sales Price Per Unit'].mean().round(2))

Sales['Daily gross profit'] = (((Sales['Sales'] - Sales['Cost Of Sales']) / Sales['Sales'])*100).round(2)

plt.figure(figsize=(10,5))
sns.lineplot(data=Sales, x='Date', y='Daily gross profit')

""" Gross Profit Per Unit (%)   =   ((Sales Per Unit - Cost of Sales Per Unit)/(Sales Per Unit))*100"""

Sales['Gross Profit Per Unit (%)'] = (((Sales['Daily Sales Price Per Unit'] -
                                        (Sales['Cost Of Sales'])/Sales['Quantity Sold'])/Sales['Daily Sales Price Per Unit'])*100).round(2)

Sales.to_csv('Sales_output.csv', index=False)

plt.figure(figsize=(10,5))
sns.lineplot(data=Sales, x='Date', y='Gross Profit Per Unit (%)')

# Sort the data by date
Sales = Sales.sort_values(by='Date')

# Normalize Quantity and Price for comparison (0 to 1 scale)/ feature scaling
Sales['Norm_Quantity'] = (Sales['Quantity Sold'] - Sales['Quantity Sold'].min()) / (Sales['Quantity Sold'].max() - Sales['Quantity Sold'].min())
Sales['Norm_Price'] = (Sales['Daily Sales Price Per Unit'] - Sales['Daily Sales Price Per Unit'].min()) / (Sales['Daily Sales Price Per Unit'].max() - Sales['Daily Sales Price Per Unit'].min())

Sales

# Compute a 'Promo Score' â€“ high quantity, low price
Sales['Promo_Score'] = Sales['Norm_Quantity'] - Sales['Norm_Price']

# Get top 3 periods with the highest score
top_promos = Sales.sort_values(by='Promo_Score', ascending=False).head(3)[['Date', 'Quantity Sold', 'Daily Sales Price Per Unit', 'Promo_Score']]

print(top_promos)

# @title Default title text
# Create the figure with purple background
fig = plt.figure(figsize=(10, 4), facecolor='#e9ccff')
ax = fig.add_subplot(111)

# Set the background color of the plot area (axes)
ax.set_facecolor('#e5ccff')  # Light purple for better contrast

# Plot the data
ax.plot(Sales['Date'], Sales['Quantity Sold'], label='Quantity Sold', color='green')
ax.plot(Sales['Date'], Sales['Daily Sales Price Per Unit'], label='Daily Sales Price Per Unit', color='blue')
ax.scatter(top_promos['Date'], top_promos['Quantity Sold'], color='red', label='Promo Peaks', zorder=5)

# Labels and title
ax.set_title('Top 3 Promo Peaks: High Quantity Sold, Low Price')
ax.set_xlabel('Date')
ax.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Define your target dates as datetime
target_dates = ['2014-03-01', '2014-08-30', '2014-09-01']
target_dates = pd.to_datetime(target_dates)

# Filter the sales DataFrame
target_periods = Sales[Sales['Date'].isin(target_dates)]

target_periods



periods = target_periods.sort_values('Date').reset_index(drop=True)

# Extract values
Q1, Q2, Q3 = periods['Quantity Sold']
P1, P2, P3 = periods['Daily Sales Price Per Unit']

# PED between 2014-03-01 and 2014-08-30
PED1 = ((Q2 - Q1) / Q1) / ((P2 - P1) / P1)

# PED between 2014-08-30 and 2014-09-01
PED2 = ((Q3 - Q2) / Q2) / ((P3 - P2) / P2)

# Print results
print(f"PED from 2014-03-01 to 2014-08-30: {PED1:.2f}")
print(f"PED from 2014-08-30 to 2014-09-01: {PED2:.2f}")

# Create the dashboard
fig, axs = plt.subplots(2, 1, figsize=(14, 12))


# 2. Promo Score Scatter Plot
sns.scatterplot(data=target_periods, x='Date', y='Promo_Score', hue='Promo_Score', palette='coolwarm', s=100, ax=axs[0])
axs[0].axhline(y=5, color='gray', linestyle='--', label='Threshold (5)')
axs[0].set_title("Promo Score Over Time")
axs[0].set_ylabel("Promo Score")
axs[0].legend()

# 3. Bar Chart for PED
ped_df = pd.DataFrame({
    'Period': ['Mar to Aug', 'Aug to Sep'],
    'PED': [PED1, PED2]
})
sns.barplot(data=ped_df, x='Period', y='PED', palette='viridis', ax=axs[1])
axs[1].axhline(y=1, color='red', linestyle='--', label='Elasticity Threshold (1)')
axs[1].set_title("Price Elasticity of Demand Across Promo Periods")
axs[1].set_ylabel("PED Value")
axs[1].legend()

plt.tight_layout()
plt.show()

# Group by Month and sum sales
monthly_sales = Sales.resample('M', on='Date').sum()

# Calculate MoM % change
monthly_sales['MoM Growth (%)'] = monthly_sales['Sales'].pct_change() * 100
monthly_sales = monthly_sales.dropna(subset=['MoM Growth (%)'])
# Display result
print(monthly_sales[['Sales', 'MoM Growth (%)']])

plt.figure(figsize=(9, 4))
sns.barplot(x=monthly_sales.index.strftime('%Y-%m'), y=monthly_sales['MoM Growth (%)'], color='skyblue')
plt.title('Month-over-Month (MoM) Growth in Sales')
plt.xlabel('Month')
plt.ylabel('MoM Growth (%)')
plt.xticks(rotation=45)
plt.axhline(0, color='gray', linestyle='--')
plt.tight_layout()
plt.show()

monthly = Sales.resample('M', on='Date').sum()
monthly['MoM Sales Growth (%)'] = monthly['Sales'].pct_change() *100
monthly['Daily gross profit(%)'] = monthly['Daily gross profit'].pct_change() *100
monthly

overall_mom_sales = monthly['MoM Sales Growth (%)'].dropna().mean()
overall_mom_profit = monthly['Daily gross profit(%)'].dropna().mean()
print(f"Overall MoM Sales Growth: {overall_mom_sales:.2f}%")
print(f"Overall MoM Profit Growth: {overall_mom_profit:.2f}%")